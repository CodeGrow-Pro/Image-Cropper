{"version":3,"sources":["components/crop/CropImage.js","utils/convertInFIle.js","components/crop/CroppedImage.jsx","utils/apis.js","components/crop/takeImage.jsx","components/imageToPdf/imageToPdf.jsx","components/crop/index.jsx","components/history/history.jsx","App.js","reportWebVitals.js","index.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","async","getCroppedImg","imageSrc","pixelCrop","rotation","arguments","length","undefined","flip","horizontal","vertical","canvas","document","createElement","ctx","getContext","rotRad","width","bBoxWidth","height","bBoxHeight","abs","cos","sin","rotateSize","translate","rotate","scale","drawImage","data","getImageData","x","y","putImageData","toBlob","file","URL","createObjectURL","convertBlobUrlToFile","blobUrl","fileName","response","fetch","blobData","blob","File","type","CroppedImage","_ref","img","setCloseImage","React","style","position","top","left","zIndex","display","justifyContent","alignItems","backgroundColor","Paper","sx","maxWidth","maxHeight","@media (max-width: 855px)","p","Stack","Text","size","objectFit","Group","Button","onClick","saveAs","isPdf","body","FormData","fileImage","then","catch","console","append","axios","post","headers","Content-Type","result","alert","uploadImage","IconCheck","IconAlertCircle","FinalCropper","props","crop","setCrop","useState","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","setRotation","croppedImage","setCroppedImage","onCropComplete","useCallback","croppedArea","showCroppedImage","imgPath","setIsTakePhotoByCamera","e","Fragment","Cropper","aspect","onCropChange","showGrid","onZoomChange","TakeImage","playing","setPlaying","setImgPath","isCropping","setIsCropping","newImgPathBase64","setNewImgPathBase64","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","className","border","HEIGHT","right","marginLeft","marginRight","muted","autoPlay","_","video","stream","getElementsByClassName","srcObject","err","videoHeight","videoWidth","getTracks","stop","stopVideo","ImageToPdfConverter","imageUrl","setIsGenerateReport","imageContainerRef","useRef","convertToPdf","imageContainer","current","imgData","html2canvas","toDataURL","pdf","jsPDF","addImage","accessToken","fileUrl","uploadPdf","save","ref","alt","CropingImage","navigate","useNavigate","isTakePhotoByCamera","isGenerateReport","files","setFiles","imagePath","setImagePath","useEffect","Title","marginBottom","color","IconPhoto","shadow","flexDirection","minHeight","noWrap","outline","borderRadius","gap","IconZoomIn","Slider","value","onChange","min","max","step","IconRefresh","IconSlideshow","Box","zoomWithScroll","onRotationChange","minZoom","maxZoom","Dropzone","accept","IMAGE_MIME_TYPE","onDrop","log","stroke","align","History","photos","setPhotos","get","_result$data","Photos","getAllPhotos","class","map","photo","index","href","imagesPath","target","App","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","BrowserRouter"],"mappings":"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","file":"static/js/main.c8c9cc35.chunk.js","sourcesContent":["export const createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", () => resolve(image));\r\n    image.addEventListener(\"error\", (error) => reject(error));\r\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); \r\n    image.src = url;\r\n  });\r\n\r\nexport function getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\r\nexport function rotateSize(width, height, rotation) {\r\n  const rotRad = getRadianAngle(rotation);\r\n\r\n  return {\r\n    width:\r\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\r\n    height:\r\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\r\n  };\r\n}\r\n\r\nexport default async function getCroppedImg(\r\n  imageSrc,\r\n  pixelCrop,\r\n  rotation = 0,\r\n  flip = { horizontal: false, vertical: false }\r\n) {\r\n  const image = await createImage(imageSrc);\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  if (!ctx) {\r\n    return null;\r\n  }\r\n\r\n  const rotRad = getRadianAngle(rotation);\r\n\r\n  // calculate bounding box of the rotated image\r\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\r\n    image.width,\r\n    image.height,\r\n    rotation\r\n  );\r\n\r\n  // set canvas size to match the bounding box\r\n  canvas.width = bBoxWidth;\r\n  canvas.height = bBoxHeight;\r\n\r\n  // translate canvas context to a central location to allow rotating and flipping around the center\r\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\r\n  ctx.rotate(rotRad);\r\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\r\n  ctx.translate(-image.width / 2, -image.height / 2);\r\n\r\n  // draw rotated image\r\n  ctx.drawImage(image, 0, 0);\r\n\r\n  // croppedAreaPixels values are bounding box relative\r\n  // extract the cropped image using these values\r\n  const data = ctx.getImageData(\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  );\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n\r\n  // paste generated rotate image at the top left corner\r\n  ctx.putImageData(data, 0, 0);\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL('image/jpeg');\r\n\r\n  // As a blob\r\n  return new Promise((resolve, reject) => {\r\n    canvas.toBlob((file) => {\r\n      resolve(URL.createObjectURL(file));\r\n    }, \"image/jpeg\");\r\n  });\r\n}\r\n","async function convertBlobUrlToFile(blobUrl, fileName) {\r\n    // Fetch the Blob content\r\n    const response = await fetch(blobUrl);\r\n    const blobData = await response.blob();\r\n\r\n    // Create a File object with the Blob content\r\n    const file = new File([blobData], fileName, { type: blobData.type });\r\n\r\n    return file;\r\n}\r\n\r\nexport default convertBlobUrlToFile","import React from \"react\";\r\nimport { Group, Stack, Paper, Button, Text } from \"@mantine/core\";\r\nimport { IconAlertCircle, IconCheck } from \"@tabler/icons\";\r\nimport { saveAs } from 'file-saver';\r\nimport axios from \"axios\";\r\nimport convertBlobUrlToFile from \"../../utils/convertInFIle\";\r\nimport { uploadImage } from \"../../utils/apis\";\r\n\r\n\r\nconst CroppedImage = ({ img, setCloseImage }) => {\r\n  const downloadImage = () => {\r\n    saveAs(img, \"image.jpg\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"90\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n      }}\r\n    >\r\n      <Paper\r\n        sx={{\r\n          width: \"60vw\",\r\n          height: \"70vh\",\r\n          maxWidth: \"800px\",\r\n          maxHeight: \"800px\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          \"@media (max-width: 855px)\": {\r\n            width: \"90%\",\r\n            height: \"90%\",\r\n          },\r\n        }}\r\n        p=\"md\"\r\n      >\r\n        <Stack\r\n          sx={{\r\n            width: \"70%\",\r\n            height: \"70%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            \"@media (max-width: 855px)\": {\r\n              width: \"90%\",\r\n              height: \"90%\",\r\n            },\r\n          }}\r\n        >\r\n          <Text size={\"xl\"}>Cropped Image!</Text>\r\n          <img\r\n            src={img}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              objectFit: \"contain\",\r\n            }}\r\n          />\r\n          <Group>\r\n            <Button\r\n              onClick={() => {\r\n                downloadImage();\r\n                setCloseImage(\"\");\r\n                uploadImage(img);\r\n              }}\r\n              sx={{ height: \"auto\" }}\r\n              p=\"sm\"\r\n            >\r\n              <Group>\r\n                <IconCheck size={20} />\r\n                <Text>Save Image</Text>\r\n              </Group>\r\n            </Button>\r\n            <Button\r\n              onClick={() => setCloseImage(\"\")}\r\n              sx={{ height: \"auto\" }}\r\n              p=\"sm\"\r\n            >\r\n              <Group>\r\n                <IconAlertCircle size={20} />\r\n                <Text>Exit</Text>\r\n              </Group>\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CroppedImage;\r\n","import axios from \"axios\";\r\nimport convertBlobUrlToFile from \"./convertInFIle\";\r\n\r\nexport const uploadImage = async (img,isPdf=false) => {\r\n    try {\r\n      const body = new FormData()\r\n      let fileImage = null\r\n      await convertBlobUrlToFile(img, isPdf ? \"report.pdf\":\"image.png\").then((file) => {\r\n        // Now 'file' is a File object that can be used for uploading\r\n        fileImage = file\r\n        // Call your upload function here using the 'file' object\r\n      })\r\n        .catch((error) => {\r\n          console.error(\"Error converting Blob URL to File:\", error);\r\n        });\r\n      body.append('upload', fileImage)\r\n      const response = await axios.post('http://localhost:3312/gallary/v1/image/63e1532bac33633a3df896e3', body, {\r\n        headers: { \"Content-Type\": 'multipart/form-data' }\r\n      }).then((result)=>{\r\n        if (result.data.data) {\r\n          alert(\"Image upload successfully!\")\r\n        }\r\n      })\r\n      \r\n    } catch (error) {\r\n      alert(\"Image upload failed!\")\r\n    }\r\n  }\r\n\r\nexport const uploadPdf = async (img)=>{\r\n    try {\r\n        const body = new FormData()\r\n        let fileImage = null\r\n        await convertBlobUrlToFile(img,\"report.pdf\").then((file) => {\r\n          // Now 'file' is a File object that can be used for uploading\r\n          fileImage = file\r\n          // Call your upload function here using the 'file' object\r\n        })\r\n          .catch((error) => {\r\n            console.error(\"Error converting Blob URL to File:\", error);\r\n          });\r\n        body.append('file', fileImage)\r\n        const response = await axios.post('https://api.the10x.io/user/image-upload', body, {\r\n          headers: { \"Content-Type\": 'multipart/form-data' ,'accessToken':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWQ0NzQ4YTMzNGVjNTFjZmFiZDVlMTUiLCJpYXQiOjE3MDk1NTU4NzEsImV4cCI6MTcwOTgxNTA3MX0.8u7pb4-Ip_h9ZpdZRKjcqQdqqkTIdep1JV4cYmwN7c0'}\r\n        }).then((result)=>{\r\n          if (result.data.data) {\r\n\r\n            alert(\"Image upload successfully!\",result.data.data.fileUrl)\r\n          }\r\n        })\r\n        \r\n      } catch (error) {\r\n        alert(\"Image upload failed!\")\r\n      }\r\n}","import React, { useState, Fragment, useCallback } from 'react';\r\nimport Cropper from 'react-easy-crop';\r\nimport ReactCrop from 'react-image-crop';\r\nimport getCroppedImg from './CropImage';\r\nimport { Button } from '@mantine/core';\r\n\r\nconst FinalCropper = (props) => {\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = useState(1)\r\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n    const [rotation, setRotation] = useState(0);\r\n    const [croppedImage, setCroppedImage] = useState(null);\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        setCroppedAreaPixels(croppedAreaPixels);\r\n    }, []);\r\n\r\n    const showCroppedImage = useCallback(async () => {\r\n        try {\r\n            const croppedImage = await getCroppedImg(\r\n                props.imgPath,\r\n                croppedAreaPixels,\r\n                rotation\r\n            );\r\n            // setCroppedImage(croppedImage);\r\n            props.setIsTakePhotoByCamera(false)\r\n            props.setCroppedImage(croppedImage)\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }, [croppedAreaPixels, rotation]);\r\n\r\n    return (\r\n        <>\r\n            <Cropper\r\n                image={props.imgPath}\r\n                crop={crop}\r\n                zoom={zoom}\r\n                aspect={16 / 16}\r\n                onCropChange={setCrop}\r\n                showGrid={true}\r\n                onCropComplete={onCropComplete}\r\n                onZoomChange={setZoom}\r\n            />\r\n            <Button\r\n                onClick={showCroppedImage}\r\n                sx={{ height: \"auto\" }}\r\n                p=\"sm\"\r\n            >\r\n                Done\r\n            </Button>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nfunction TakeImage(props) {\r\n    const [playing, setPlaying] = useState(false)\r\n    const [imgPath, setImgPath] = useState('')\r\n    const [isCropping, setIsCropping] = useState(false)\r\n    const [newImgPathBase64, setNewImgPathBase64] = useState('')\r\n    const [crop, setCrop] = useState({ width: 300, height: 400 });\r\n\r\n    const HEIGHT = 400;\r\n    const WIDTH = HEIGHT / 4 * 3;\r\n\r\n    navigator.getUserMedia = (navigator.getUserMedia ||\r\n        navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia ||\r\n        navigator.msGetUserMedia);\r\n\r\n    const startVideo = _ => {\r\n        setIsCropping(false)\r\n        setImgPath('')\r\n        setPlaying(true)\r\n        navigator.getUserMedia(\r\n            {\r\n                video: true,\r\n            },\r\n            (stream) => {\r\n                let video = document.getElementsByClassName('app__videoFeed')[0];\r\n                if (video) {\r\n                    video.srcObject = stream;\r\n                }\r\n            },\r\n            (err) => console.error(err)\r\n        );\r\n    }\r\n\r\n    const stopVideo = _ => {\r\n        setPlaying(false)\r\n        let video = document.getElementsByClassName('app__videoFeed')[0];\r\n        video.srcObject.getTracks()[0].stop();\r\n    }\r\n\r\n    const captureVideo = _ => {\r\n        const canvas = document.createElement(\"CANVAS\");\r\n        var video = document.getElementsByClassName('app__videoFeed')[0];\r\n        canvas.height = video.videoHeight;\r\n        canvas.width = video.videoHeight / 4 * 3;\r\n        canvas.getContext('2d').drawImage(video, (video.videoWidth - (video.videoHeight / 4 * 3)) / 2, 0, video.videoHeight / 4 * 3, video.videoHeight, 0, 0, video.videoHeight / 4 * 3, video.videoHeight);\r\n        canvas.toBlob((blob) => {\r\n            stopVideo()\r\n            setImgPath(URL.createObjectURL(blob))\r\n        }, 'image/jpeg', 0.95);\r\n    }\r\n\r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row mt-4'>\r\n                {\r\n                    !imgPath && <div className='col-12 text-center'>\r\n                        {playing && <div style={{\r\n                            border: '2px dotted red',\r\n                            position: 'absolute',\r\n                            height: HEIGHT,\r\n                            width: WIDTH,\r\n                            left: 0,\r\n                            right: 0,\r\n                            marginLeft: 'auto',\r\n                            marginRight: 'auto',\r\n                        }}>\r\n                          \r\n                        </div>}\r\n\r\n                       { playing && <video\r\n                            style={{ border: '1px solid white' }}\r\n                            height={HEIGHT}\r\n                            muted\r\n                            autoPlay\r\n                            className='app__videoFeed'\r\n                        /> || <img src='https://gifsec.com/wp-content/uploads/2022/10/photography-gifs.gif'/>}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className='row'>\r\n                <div className='col-12 text-center mt-4'>\r\n                    {\r\n                        !playing &&\r\n                        <button className='btn btn-primary' onClick={startVideo}>Start</button>\r\n                        ||\r\n                        <button className='btn btn-success' onClick={captureVideo}>Capture</button>\r\n                    }\r\n                    {\r\n                        !playing && !!imgPath &&\r\n                        <button className='btn btn-warning ml-2' onClick={() => setIsCropping(true)}>Crop</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n            {imgPath && <FinalCropper imgPath={imgPath} setIsTakePhotoByCamera={props.setIsTakePhotoByCamera}\r\n                setCroppedImage={props.setCroppedImage} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TakeImage;","import React, { useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport { Group, Stack, Paper, Button, Text } from \"@mantine/core\";\r\nimport { IconAlertCircle, IconCheck } from \"@tabler/icons\";\r\nimport { uploadImage, uploadPdf } from '../../utils/apis';\r\n\r\nconst ImageToPdfConverter = ({ imageUrl, setIsGenerateReport }) => {\r\n    const imageContainerRef = useRef();\r\n    const convertToPdf = async () => {\r\n        const imageContainer = imageContainerRef.current;\r\n        if (!imageContainer) {\r\n            return;\r\n        }\r\n\r\n        const canvas = await html2canvas(imageContainer);\r\n        const imgData = canvas.toDataURL('image/png');\r\n\r\n        const pdf = new jsPDF('p', 'mm', 'a4');\r\n        pdf.addImage(imgData, 'PNG', 10, 10, 190, 0);\r\n       const datafile =  pdf.save('converted_image.pdf');\r\n        uploadPdf(datafile)\r\n        setIsGenerateReport(false)\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"fixed\",\r\n                top: \"0\",\r\n                left: \"0\",\r\n                zIndex: \"90\",\r\n                width: \"100vw\",\r\n                height: \"100vh\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                backgroundColor: \"rgba(0,0,0,0.5)\",\r\n            }}\r\n        >\r\n            <Paper\r\n                sx={{\r\n                    width: \"90vw\",\r\n                    height: \"90vh\",\r\n                    maxWidth: \"800px\",\r\n                    maxHeight: \"800px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    \"@media (max-width: 855px)\": {\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                    },\r\n                }}\r\n                p=\"md\"\r\n            >\r\n                <Stack\r\n                    sx={{\r\n                        width: \"auto\",\r\n                        height: \"90%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        \"@media (max-width: 855px)\": {\r\n                            width: \"90%\",\r\n                            height: \"90%\",\r\n                        },\r\n                    }}\r\n                >\r\n                    <Text size={\"xl\"}>Generated Report!</Text>\r\n                    <div>\r\n                        <div ref={imageContainerRef} style={{display:'flex',justifyContent:'center'}}>\r\n                            <img src={imageUrl} alt=\"Converted Image\" style={{\r\n                                width: \"400px\",\r\n                                height: \"400px\",\r\n                                objectFit: \"contain\",\r\n                            }} />\r\n                        </div>\r\n                    </div>\r\n                    <Group>\r\n                        <Button onClick={()=>{\r\n                            convertToPdf()\r\n                        }}>Download Pdf & Save</Button>\r\n                        <Button\r\n                            onClick={() => setIsGenerateReport(false)}\r\n                            sx={{ height: \"auto\" }}\r\n                            p=\"sm\"\r\n                        >\r\n                            <Group>\r\n                                <IconAlertCircle size={20} />\r\n                                <Text>Exit</Text>\r\n                            </Group>\r\n                        </Button>\r\n                    </Group>\r\n                </Stack>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageToPdfConverter;\r\n","//STYLING\r\nimport { Box, Paper, Button, Title, Group, Slider, Stack } from \"@mantine/core\";\r\nimport { Text } from \"@mantine/core\";\r\nimport { Dropzone, IMAGE_MIME_TYPE } from \"@mantine/dropzone\";\r\nimport {\r\n  IconZoomIn,\r\n  IconPhoto,\r\n  IconRefresh,\r\n  IconSlideshow,\r\n  IconAlertCircle,\r\n} from \"@tabler/icons\";\r\n\r\n//REACT HOOKS\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n//COMPONENTS\r\nimport Cropper from \"react-easy-crop\";\r\nimport getCroppedImg from \"./CropImage\";\r\nimport CroppedImage from \"./CroppedImage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TakeImage from \"./takeImage\";\r\nimport ImageToPdfConverter from \"../imageToPdf/imageToPdf\";\r\n\r\nfunction CropingImage() {\r\n  const navigate = useNavigate()\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [rotation, setRotation] = useState(0);\r\n  const [isTakePhotoByCamera, setIsTakePhotoByCamera] = useState(false)\r\n  const [isGenerateReport,setIsGenerateReport] = useState(false)\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n  //FILE\r\n  const [files, setFiles] = useState([]);\r\n  const [imagePath, setImagePath] = useState(null);\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  const showCroppedImage = useCallback(async () => {\r\n    try {\r\n      const croppedImage = await getCroppedImg(\r\n        imagePath,\r\n        croppedAreaPixels,\r\n        rotation\r\n      );\r\n      setCroppedImage(croppedImage);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }, [croppedAreaPixels, rotation]);\r\n\r\n  useEffect(() => {\r\n    if (files[0]) {\r\n      setImagePath(URL.createObjectURL(files[0]));\r\n    }\r\n  }, [files]);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        !isTakePhotoByCamera && <Title sx={{ marginBottom: \"2rem\", color: \"black\" }}>\r\n          <Group>\r\n            <Text className=\"text\">Image Cropper</Text>\r\n            <IconPhoto className=\"text\" size={47} />\r\n          </Group>\r\n        </Title>\r\n      }\r\n      {imagePath && (\r\n        <Paper shadow={\"xl\"} p=\"lg\">\r\n          <Group\r\n            sx={{\r\n              width: \"70vw\",\r\n              height: \"70vh\",\r\n              \"@media (max-width: 855px)\": {\r\n                flexDirection: \"column-reverse\",\r\n                minHeight: \"700px\",\r\n              },\r\n            }}\r\n            noWrap\r\n          >\r\n            <Stack\r\n              p={\"lg\"}\r\n              sx={{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                outline: \"1px solid gray\",\r\n                borderRadius: \"10px\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Stack>\r\n                <Stack>\r\n                  <Group sx={{ gap: \"0.3rem\" }}>\r\n                    <IconZoomIn size={20} />\r\n                    <Text>Zoom Slider:</Text>\r\n                  </Group>\r\n                  <Slider\r\n                    value={zoom}\r\n                    onChange={setZoom}\r\n                    min={1}\r\n                    max={5}\r\n                    step={0.05}\r\n                    sx={{ width: \"100%\" }}\r\n                  />\r\n                </Stack>\r\n                <Stack>\r\n                  <Group sx={{ gap: \"0.3rem\" }}>\r\n                    <IconRefresh size={20} />\r\n                    <Text>Rotation Slider:</Text>\r\n                  </Group>\r\n                  <Slider\r\n                    value={rotation}\r\n                    onChange={setRotation}\r\n                    min={-180}\r\n                    max={180}\r\n                    sx={{ width: \"100%\" }}\r\n                  />\r\n                </Stack>\r\n                <Stack>\r\n                  <Button\r\n                    onClick={showCroppedImage}\r\n                    sx={{ height: \"auto\" }}\r\n                    p=\"sm\"\r\n                  >\r\n                    <Group>\r\n                      <IconSlideshow size={20} />\r\n                      <Text>Show Image</Text>\r\n                    </Group>\r\n                  </Button>\r\n                  <Button\r\n                    onClick={()=>setIsGenerateReport(true)}\r\n                    sx={{ height: \"auto\" }}\r\n                    p=\"sm\"\r\n                  >\r\n                    <Group>\r\n                      {/* <IconSlideshow size={20} /> */}\r\n                      <Text>Generate Report</Text>\r\n                    </Group>\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setImagePath(\"\");\r\n                      setCroppedImage(\"\");\r\n                    }}\r\n                    sx={{ height: \"auto\" }}\r\n                    p=\"sm\"\r\n                  >\r\n                    <Group>\r\n                      <IconAlertCircle size={20} />\r\n                      <Text>Clear Image</Text>\r\n                    </Group>\r\n                  </Button>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack>\r\n\r\n            <Group\r\n              p={\"lg\"}\r\n              sx={{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                outline: \"1px solid gray\",\r\n                position: \"relative\",\r\n                justifyContent: \"center\",\r\n                borderRadius: \"10px\",\r\n              }}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <Cropper\r\n                  image={imagePath}\r\n                  crop={crop}\r\n                  rotation={rotation}\r\n                  zoom={zoom}\r\n                  aspect={6 / 5}\r\n                  zoomWithScroll\r\n                  style={{ width: '330px' }}\r\n                  onCropChange={setCrop}\r\n                  onRotationChange={setRotation}\r\n                  onCropComplete={onCropComplete}\r\n                  onZoomChange={setZoom}\r\n                  objectFit=\"contain\"\r\n                  minZoom={1}\r\n                  maxZoom={5}\r\n                />\r\n              </Box>\r\n            </Group>\r\n          </Group>\r\n        </Paper>\r\n      )}\r\n\r\n      {croppedImage && (\r\n        <CroppedImage img={croppedImage} setCloseImage={setCroppedImage} />\r\n      )}\r\n\r\n      {!imagePath && !isTakePhotoByCamera && (\r\n        <>\r\n          <Dropzone\r\n            accept={IMAGE_MIME_TYPE}\r\n            onDrop={(data) => {\r\n              setFiles(data)\r\n              console.log('line 198', data)\r\n            }}\r\n            sx={{\r\n              width: \"60vw\",\r\n              height: \"200px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Group>\r\n              <IconPhoto size={50} stroke={1.5} />\r\n              <Text align=\"center\">Drop images here</Text>\r\n            </Group>\r\n          </Dropzone>\r\n          <br />\r\n          <div className=\"displayFlex\">\r\n            <Button onClick={() => setIsTakePhotoByCamera(true)}>Take a photo</Button>\r\n            <Button onClick={() => navigate('/history')}>Access History</Button>\r\n          </div>\r\n        </>\r\n      )}\r\n      {\r\n        isTakePhotoByCamera && <TakeImage setImagePath={setImagePath} setCroppedImage={setCroppedImage} setIsTakePhotoByCamera={setIsTakePhotoByCamera} />\r\n      }\r\n      {\r\n        isGenerateReport && <ImageToPdfConverter imageUrl={imagePath} setIsGenerateReport={setIsGenerateReport}/>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CropingImage;\r\n","import { SimpleGrid, Card, Image, Text, Container, AspectRatio } from '@mantine/core';\r\nimport classes from './history.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst mockdata = [\r\n  {\r\n    title: 'Top 10 places to visit in Norway this summer',\r\n    image:\r\n      'https://images.unsplash.com/photo-1527004013197-933c4bb611b3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\r\n    date: 'August 18, 2022',\r\n  },\r\n  {\r\n    title: 'Best forests to visit in North America',\r\n    image:\r\n      'https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\r\n    date: 'August 27, 2022',\r\n  },\r\n  {\r\n    title: 'Hawaii beaches review: better than you think',\r\n    image:\r\n      'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\r\n    date: 'September 9, 2022',\r\n  },\r\n  {\r\n    title: 'Mountains at night: 12 best locations to enjoy the view',\r\n    image:\r\n      'https://images.unsplash.com/photo-1519681393784-d120267933ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\r\n    date: 'September 12, 2022',\r\n  },\r\n];\r\n\r\nexport function History() {\r\n  const [photos, setPhotos] = useState([])\r\n  const getAllPhotos = async () => {\r\n    try {\r\n      await axios.get('http://localhost:3312/gallary/v1/photos/filter?userId=63e1532bac33633a3df896e3').then((result) => {\r\n        if (result.data.Photos) {\r\n          setPhotos(result?.data?.Photos)\r\n        }\r\n      })\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllPhotos()\r\n  }, [])\r\n  return (\r\n    <section>\r\n      <div class=\"main-container\">\r\n        <ul class=\"grid-wrapper\">\r\n          {\r\n            photos?.map((photo, index) => {\r\n              return <a href={photo?.imagesPath} target=\"_blank\">\r\n                <div>\r\n                <img src={photo?.imagesPath} width={'200px'} height={'200px'}/>\r\n                <p>image {index + 1}</p>\r\n              </div>\r\n              </a>\r\n            })\r\n          }\r\n        </ul>\r\n        {photos?.length == 0 && <h3>Cropped Image Not found!</h3>}\r\n      </div>\r\n    </section>\r\n  );\r\n}","//STYLING\nimport { Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport CropingImage from \"./components/crop\";\nimport { History } from \"./components/history/history\";\nimport React from \"react\";\nimport ImageToPdfConverter from \"./components/imageToPdf/imageToPdf\";\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<CropingImage />} />\n      <Route path=\"/history\" element={<History />} />\n      <Route path=\"/image2pdf\" element={<ImageToPdfConverter />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}